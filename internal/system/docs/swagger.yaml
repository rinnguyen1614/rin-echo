basePath: /api/v1
definitions:
  jwt.Token:
    properties:
      access_token:
        type: string
      expiry:
        type: integer
      token_type:
        type: string
    type: object
  model.Model:
    properties:
      id:
        type: integer
    type: object
  model.QueryResult:
    properties:
      page:
        type: integer
      page_size:
        type: integer
      records: {}
      total:
        type: integer
    type: object
  models.Response:
    properties:
      data: {}
      error: {}
    type: object
  request.ChangeEmail:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  request.ChangePassword:
    properties:
      current_password:
        type: string
      new_password:
        type: string
      username:
        type: string
    required:
    - current_password
    - username
    type: object
  request.ChangePhone:
    properties:
      phone:
        minLength: 10
        type: string
    required:
    - phone
    type: object
  request.CreateMenu:
    properties:
      children:
        items:
          $ref: '#/definitions/request.CreateMenu'
        type: array
      component:
        type: string
      hidden:
        type: boolean
      icon:
        type: string
      name:
        minLength: 5
        type: string
      parent_id:
        type: integer
      path:
        minLength: 6
        type: string
      slug:
        minLength: 6
        type: string
      sort:
        type: integer
      title:
        type: string
      type:
        type: string
    required:
    - name
    - path
    - slug
    type: object
  request.CreateResource:
    properties:
      action:
        type: string
      children:
        items:
          $ref: '#/definitions/request.CreateResource'
        type: array
      description:
        type: string
      name:
        minLength: 5
        type: string
      object:
        type: string
      parent_id:
        type: integer
      slug:
        minLength: 6
        type: string
    required:
    - name
    - slug
    type: object
  request.CreateRole:
    properties:
      is_default:
        type: boolean
      menu_ids:
        items:
          type: integer
        type: array
      name:
        minLength: 3
        type: string
      resource_ids:
        items:
          type: integer
        type: array
      slug:
        minLength: 3
        type: string
    required:
    - name
    - slug
    type: object
  request.CreateUser:
    properties:
      active:
        type: boolean
      change_password_on_next_login:
        type: boolean
      email:
        type: string
      full_name:
        type: string
      gender:
        type: integer
      lockout_enabled:
        type: boolean
      password:
        type: string
      random_password:
        type: boolean
      role_ids:
        items:
          type: integer
        type: array
      send_activation_email:
        type: boolean
      username:
        minLength: 5
        type: string
    required:
    - email
    - full_name
    - username
    type: object
  request.Login:
    properties:
      password:
        minLength: 6
        type: string
      username:
        minLength: 5
        type: string
    required:
    - password
    - username
    type: object
  request.UpdateMenu:
    properties:
      component:
        type: string
      hidden:
        type: boolean
      icon:
        type: string
      name:
        minLength: 5
        type: string
      parent_id:
        type: integer
      path:
        minLength: 6
        type: string
      slug:
        minLength: 6
        type: string
      sort:
        type: integer
      title:
        type: string
      type:
        type: string
    required:
    - name
    - path
    - slug
    type: object
  request.UpdateProfile:
    properties:
      avatar_path:
        type: string
      date_of_birth:
        type: string
      email:
        type: string
      full_name:
        type: string
      gender:
        type: integer
      phone:
        type: string
      username:
        type: string
    required:
    - email
    - full_name
    type: object
  request.UpdateResource:
    properties:
      action:
        type: string
      description:
        type: string
      name:
        minLength: 5
        type: string
      object:
        type: string
      parent_id:
        type: integer
      slug:
        minLength: 6
        type: string
    required:
    - name
    - slug
    type: object
  request.UpdateRole:
    properties:
      is_default:
        type: boolean
      menu_ids:
        items:
          type: integer
        type: array
      name:
        minLength: 3
        type: string
      resource_ids:
        items:
          type: integer
        type: array
      slug:
        minLength: 3
        type: string
    required:
    - name
    - slug
    type: object
  request.UpdateUser:
    properties:
      active:
        type: boolean
      change_password_on_next_login:
        type: boolean
      email:
        type: string
      full_name:
        type: string
      gender:
        type: integer
      lockout_enabled:
        type: boolean
      password:
        type: string
      random_password:
        type: boolean
      role_ids:
        items:
          type: integer
        type: array
      send_activation_email:
        type: boolean
      username:
        minLength: 5
        type: string
    required:
    - email
    - full_name
    - username
    type: object
  request.VerifyEmail:
    properties:
      code:
        type: string
    required:
    - code
    type: object
  request.VerifyPhone:
    properties:
      code:
        type: string
    required:
    - code
    type: object
  response.AuditLog:
    properties:
      application_name:
        type: string
      created_at:
        type: string
      creator_user_id:
        type: integer
      device_id:
        type: string
      device_name:
        type: string
      error:
        type: string
      id:
        type: integer
      impersonator_user_id:
        type: integer
      ip_address:
        type: string
      latency:
        type: integer
      location:
        type: string
      operation_method:
        type: string
      operation_name:
        type: string
      remark:
        type: string
      request_body:
        type: string
      request_id:
        type: string
      request_method:
        type: string
      request_url:
        type: string
      response_body:
        type: string
      start_time:
        type: string
      status_code:
        type: integer
      user_agent:
        type: string
      user_id:
        type: integer
      username:
        type: string
    type: object
  response.FileResponse:
    properties:
      ext:
        type: string
      file_name:
        type: string
      name:
        type: string
      path:
        type: string
      size:
        type: integer
    type: object
  response.Menu:
    properties:
      component:
        type: string
      created_at:
        type: string
      creator_user_id:
        type: integer
      deleted_at:
        type: string
      deleter_user_id:
        type: integer
      hidden:
        type: boolean
      icon:
        type: string
      id:
        type: integer
      modified_at:
        type: string
      modifier_user_id:
        type: integer
      name:
        type: string
      parent_id:
        type: integer
      path:
        type: string
      slug:
        type: string
      sort:
        type: integer
      title:
        type: string
      type:
        type: string
    type: object
  response.MenuTree:
    properties:
      children:
        items:
          $ref: '#/definitions/response.MenuTree'
        type: array
      component:
        type: string
      created_at:
        type: string
      creator_user_id:
        type: integer
      deleted_at:
        type: string
      deleter_user_id:
        type: integer
      hidden:
        type: boolean
      icon:
        type: string
      id:
        type: integer
      modified_at:
        type: string
      modifier_user_id:
        type: integer
      name:
        type: string
      parent_id:
        type: integer
      path:
        type: string
      slug:
        type: string
      sort:
        type: integer
      title:
        type: string
      type:
        type: string
    type: object
  response.Profile:
    properties:
      avatar_path:
        type: string
      date_of_birth:
        type: string
      email:
        type: string
      email_verified:
        type: boolean
      full_name:
        type: string
      gender:
        type: integer
      id:
        type: integer
      phone:
        type: string
      phone_verified:
        type: boolean
      username:
        type: string
      uuid:
        type: string
    type: object
  response.Resource:
    properties:
      action:
        type: string
      created_at:
        type: string
      creator_user_id:
        type: integer
      deleted_at:
        type: string
      deleter_user_id:
        type: integer
      description:
        type: string
      id:
        type: integer
      modified_at:
        type: string
      modifier_user_id:
        type: integer
      name:
        type: string
      object:
        type: string
      parent_id:
        type: integer
      permissions:
        items:
          $ref: '#/definitions/response.ResourcePermission'
        type: array
      slug:
        type: string
    type: object
  response.ResourcePermission:
    properties:
      created_at:
        type: string
      creator_user_id:
        type: integer
      deleted_at:
        type: string
      deleter_user_id:
        type: integer
      id:
        type: integer
      modified_at:
        type: string
      modifier_user_id:
        type: integer
      role:
        properties:
          id:
            type: integer
          name:
            type: string
          slug:
            type: string
        type: object
    type: object
  response.ResourceTree:
    properties:
      action:
        type: string
      children:
        items:
          $ref: '#/definitions/response.ResourceTree'
        type: array
      created_at:
        type: string
      creator_user_id:
        type: integer
      deleted_at:
        type: string
      deleter_user_id:
        type: integer
      description:
        type: string
      id:
        type: integer
      modified_at:
        type: string
      modifier_user_id:
        type: integer
      name:
        type: string
      object:
        type: string
      parent_id:
        type: integer
      permissions:
        items:
          $ref: '#/definitions/response.ResourcePermission'
        type: array
      slug:
        type: string
    type: object
  response.Role:
    properties:
      created_at:
        type: string
      creator_user_id:
        type: integer
      deleted_at:
        type: string
      deleter_user_id:
        type: integer
      id:
        type: integer
      is_default:
        type: boolean
      is_static:
        type: boolean
      menus:
        items:
          $ref: '#/definitions/response.RoleMenu'
        type: array
      modified_at:
        type: string
      modifier_user_id:
        type: integer
      name:
        type: string
      permissions:
        items:
          $ref: '#/definitions/response.RolePermission'
        type: array
      slug:
        type: string
    type: object
  response.RoleMenu:
    properties:
      id:
        type: integer
      name:
        type: string
      path:
        type: string
      slug:
        type: string
    type: object
  response.RolePermission:
    properties:
      id:
        type: integer
      resource:
        properties:
          action:
            type: string
          id:
            type: integer
          name:
            type: string
          object:
            type: string
          slug:
            type: string
        type: object
    type: object
  response.User:
    properties:
      avatar_path:
        type: string
      created_at:
        type: string
      creator_user_id:
        type: integer
      date_of_birth:
        type: string
      deleted_at:
        type: string
      deleter_user_id:
        type: integer
      email:
        type: string
      email_verified:
        type: boolean
      full_name:
        type: string
      gender:
        type: integer
      id:
        type: integer
      is_global_admin:
        type: boolean
      modified_at:
        type: string
      modifier_user_id:
        type: integer
      phone:
        type: string
      phone_verified:
        type: boolean
      user_roles:
        items:
          $ref: '#/definitions/response.UserRole'
        type: array
      username:
        type: string
    type: object
  response.UserMenu:
    properties:
      children:
        $ref: '#/definitions/response.UserMenus'
      component:
        type: string
      icon:
        type: string
      id:
        type: integer
      name:
        type: string
      parent_id:
        type: integer
      path:
        type: string
      slug:
        type: string
      sort:
        type: integer
      title:
        type: string
      type:
        type: string
    type: object
  response.UserMenus:
    items:
      $ref: '#/definitions/response.UserMenu'
    type: array
  response.UserPermission:
    properties:
      actions:
        items:
          type: string
        type: array
      name:
        type: string
    type: object
  response.UserRole:
    properties:
      created_at:
        type: string
      creator_user_id:
        type: integer
      deleted_at:
        type: string
      deleter_user_id:
        type: integer
      id:
        type: integer
      modified_at:
        type: string
      modifier_user_id:
        type: integer
      role:
        properties:
          id:
            type: integer
          name:
            type: string
          slug:
            type: string
        type: object
    type: object
host: localhost:1809
info:
  contact: {}
  description: Application using Go Echo framework
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: rin-echo API
  version: 1.0.0
paths:
  /account/avatar:
    put:
      consumes:
      - multipart/form-data
      parameters:
      - description: File type is image type
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: '{"data": {}}'
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.Profile'
              type: object
      security:
      - Bearer: []
      summary: Change avatar
      tags:
      - account
  /account/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: Login
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.Login'
      produces:
      - application/json
      responses:
        "200":
          description: '{"data": {}}'
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/jwt.Token'
              type: object
      summary: Login
      tags:
      - account
  /account/menus:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: '{"data": {}}'
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.UserMenu'
                  type: array
              type: object
      security:
      - Bearer: []
      summary: Get menus
      tags:
      - account
  /account/password:
    put:
      consumes:
      - application/json
      description: Change password
      parameters:
      - description: Change password
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.ChangePassword'
      produces:
      - application/json
      responses:
        "200":
          description: '{"data": {}}'
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/jwt.Token'
              type: object
      security:
      - Bearer: []
      summary: Change password
      tags:
      - account
  /account/permissions:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: '{"data": {}}'
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.UserPermission'
                  type: array
              type: object
      security:
      - Bearer: []
      summary: Get permissions
      tags:
      - account
  /account/profile:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: '{"data": {}}'
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.Profile'
              type: object
      security:
      - Bearer: []
      summary: Profile
      tags:
      - account
    put:
      consumes:
      - application/json
      parameters:
      - description: verify phone
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.VerifyPhone'
      produces:
      - application/json
      responses:
        "200":
          description: '{"data": {}}'
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - Bearer: []
      summary: Verify Phone
      tags:
      - account
  /files/download:
    post:
      description: Download file with query's path
      parameters:
      - description: path of file
        in: query
        name: path
        required: true
        type: string
      responses:
        "200":
          description: ""
      security:
      - Bearer: []
      summary: Download file
      tags:
      - files
  /files/upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload file with the input payload
      parameters:
      - description: Muilti files
        in: formData
        name: files
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: '{"data": {}}'
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.FileResponse'
                  type: array
              type: object
      security:
      - Bearer: []
      summary: Upload file
      tags:
      - files
  /menus:
    post:
      consumes:
      - application/json
      description: Create a new menu with the input payload
      parameters:
      - description: Create menu
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.CreateMenu'
      produces:
      - application/json
      responses:
        "200":
          description: '{"data": {}}'
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Model'
              type: object
      security:
      - Bearer: []
      summary: Create a new menu
      tags:
      - menus
  /menus/{id}:
    delete:
      consumes:
      - application/json
      description: Delete the menu corresponding to the input id
      parameters:
      - description: ID of the menu to be deleted
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"data": {}}'
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - Bearer: []
      summary: Delete menu identified by the given id
      tags:
      - menus
    get:
      consumes:
      - application/json
      description: Get details of menu corresponding to the input id
      parameters:
      - description: ID of the menu
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"data": {}}'
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.Menu'
              type: object
      security:
      - Bearer: []
      summary: Get details for a given id
      tags:
      - menus
    put:
      consumes:
      - application/json
      description: Update the menu corresponding to the input id
      parameters:
      - description: ID of the menu to be updated
        in: path
        name: id
        required: true
        type: integer
      - description: Update menu
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.UpdateMenu'
      produces:
      - application/json
      responses:
        "200":
          description: '{"data": {}}'
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Model'
              type: object
      security:
      - Bearer: []
      summary: Update menu identified by the given id
      tags:
      - menus
  /menus/trees:
    get:
      consumes:
      - application/json
      description: Get details of all menus
      parameters:
      - description: pageSize
        in: query
        name: page_size
        required: true
        type: integer
      - description: page
        in: query
        name: page
        required: true
        type: integer
      - description: 'filters separated by '
        in: query
        name: filters
        type: string
      - description: 'selects separated by '
        in: query
        name: selects
        type: string
      - description: 'sorts separated by '
        in: query
        name: sorts
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"data": {}}'
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  allOf:
                  - $ref: '#/definitions/model.QueryResult'
                  - properties:
                      records:
                        items:
                          $ref: '#/definitions/response.MenuTree'
                        type: array
                    type: object
              type: object
      security:
      - Bearer: []
      summary: Get details of all menus
      tags:
      - menus
  /resources:
    post:
      consumes:
      - application/json
      description: Create a new resource with the input payload
      parameters:
      - description: Create resource
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.CreateResource'
      produces:
      - application/json
      responses:
        "200":
          description: '{"data": {}}'
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Model'
              type: object
      security:
      - Bearer: []
      summary: Create a new resource
      tags:
      - resources
  /resources/{id}:
    delete:
      consumes:
      - application/json
      description: Delete the resource corresponding to the input id
      parameters:
      - description: ID of the resource to be deleted
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"data": {}}'
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - Bearer: []
      summary: Delete resource identified by the given id
      tags:
      - resources
    get:
      consumes:
      - application/json
      description: Get details of resource corresponding to the input id
      parameters:
      - description: ID of the resource
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"data": {}}'
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.Resource'
              type: object
      security:
      - Bearer: []
      summary: Get details for a given id
      tags:
      - resources
    put:
      consumes:
      - application/json
      description: Update the resource corresponding to the input id
      parameters:
      - description: ID of the resource to be updated
        in: path
        name: id
        required: true
        type: integer
      - description: Update resource
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.UpdateResource'
      produces:
      - application/json
      responses:
        "200":
          description: '{"data": {}}'
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Model'
              type: object
      security:
      - Bearer: []
      summary: Update resource identified by the given id
      tags:
      - resources
  /resources/trees:
    get:
      consumes:
      - application/json
      description: Get details of all resources
      parameters:
      - description: pageSize
        in: query
        name: page_size
        required: true
        type: integer
      - description: page
        in: query
        name: page
        required: true
        type: integer
      - description: 'filters separated by '
        in: query
        name: filters
        type: string
      - description: 'selects separated by '
        in: query
        name: selects
        type: string
      - description: 'sorts separated by '
        in: query
        name: sorts
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"data": {}}'
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  allOf:
                  - $ref: '#/definitions/model.QueryResult'
                  - properties:
                      records:
                        items:
                          $ref: '#/definitions/response.ResourceTree'
                        type: array
                    type: object
              type: object
      security:
      - Bearer: []
      summary: Get details of all resources
      tags:
      - resources
  /roles:
    post:
      consumes:
      - application/json
      description: Create a new role with the input payload
      parameters:
      - description: Create role
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.CreateRole'
      produces:
      - application/json
      responses:
        "200":
          description: '{"data": {}}'
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Model'
              type: object
      security:
      - Bearer: []
      summary: Create a new role
      tags:
      - roles
  /roles/{id}:
    delete:
      consumes:
      - application/json
      description: Delete the role corresponding to the input id
      parameters:
      - description: ID of the role to be deleted
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"data": {}}'
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - Bearer: []
      summary: Delete role identified by the given id
      tags:
      - roles
    get:
      consumes:
      - application/json
      description: Get details of role corresponding to the input id
      parameters:
      - description: ID of the role
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"data": {}}'
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.Role'
              type: object
      security:
      - Bearer: []
      summary: Get details for a given id
      tags:
      - roles
    put:
      consumes:
      - application/json
      description: Update the role corresponding to the input id
      parameters:
      - description: ID of the role to be updated
        in: path
        name: id
        required: true
        type: integer
      - description: Update role
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.UpdateRole'
      produces:
      - application/json
      responses:
        "200":
          description: '{"data": {}}'
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Model'
              type: object
      security:
      - Bearer: []
      summary: Update role identified by the given id
      tags:
      - roles
  /roles/trees:
    get:
      consumes:
      - application/json
      description: Get details of all roles
      parameters:
      - description: pageSize
        in: query
        name: page_size
        required: true
        type: integer
      - description: page
        in: query
        name: page
        required: true
        type: integer
      - description: 'filters separated by '
        in: query
        name: filters
        type: string
      - description: 'selects separated by '
        in: query
        name: selects
        type: string
      - description: 'sorts separated by '
        in: query
        name: sorts
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"data": {}}'
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  allOf:
                  - $ref: '#/definitions/model.QueryResult'
                  - properties:
                      records:
                        items:
                          $ref: '#/definitions/response.Role'
                        type: array
                    type: object
              type: object
      security:
      - Bearer: []
      summary: Get details of all roles
      tags:
      - roles
  /users:
    post:
      consumes:
      - application/json
      description: Create a new user with the input payload
      parameters:
      - description: Create user
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.CreateUser'
      produces:
      - application/json
      responses:
        "200":
          description: '{"data": {}}'
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Model'
              type: object
      security:
      - Bearer: []
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete the user corresponding to the input id
      parameters:
      - description: ID of the user to be deleted
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"data": {}}'
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - Bearer: []
      summary: Delete user identified by the given id
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get details of user corresponding to the input id
      parameters:
      - description: ID of the user
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"data": {}}'
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.User'
              type: object
      security:
      - Bearer: []
      summary: Get details for a given id
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update the user corresponding to the input id
      parameters:
      - description: ID of the user to be updated
        in: path
        name: id
        required: true
        type: integer
      - description: Update user
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.UpdateUser'
      produces:
      - application/json
      responses:
        "200":
          description: '{"data": {}}'
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Model'
              type: object
      security:
      - Bearer: []
      summary: Update user identified by the given id
      tags:
      - users
  /users/trees:
    get:
      consumes:
      - application/json
      description: Get details of all users
      parameters:
      - description: pageSize
        in: query
        name: page_size
        required: true
        type: integer
      - description: page
        in: query
        name: page
        required: true
        type: integer
      - description: 'filters separated by '
        in: query
        name: filters
        type: string
      - description: 'selects separated by '
        in: query
        name: selects
        type: string
      - description: 'sorts separated by '
        in: query
        name: sorts
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"data": {}}'
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  allOf:
                  - $ref: '#/definitions/model.QueryResult'
                  - properties:
                      records:
                        items:
                          $ref: '#/definitions/response.User'
                        type: array
                    type: object
              type: object
      security:
      - Bearer: []
      summary: Get details of all users
      tags:
      - users
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
