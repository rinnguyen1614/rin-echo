// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	echo "github.com/rinnguyen1614/rin-echo/internal/core/echo"
	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"

	request "github.com/rinnguyen1614/rin-echo/internal/system/app/model/request"

	response "github.com/rinnguyen1614/rin-echo/internal/system/app/model/response"

	service "github.com/rinnguyen1614/rin-echo/internal/system/app/service"
)

// AccountService is an autogenerated mock type for the AccountService type
type AccountService struct {
	mock.Mock
}

// ChangeAvatar provides a mock function with given fields: id, file
func (_m *AccountService) ChangeAvatar(id uint, file *multipart.FileHeader) (interface{}, error) {
	ret := _m.Called(id, file)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(uint, *multipart.FileHeader) interface{}); ok {
		r0 = rf(id, file)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, *multipart.FileHeader) error); ok {
		r1 = rf(id, file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeEmail provides a mock function with given fields: id, cmd
func (_m *AccountService) ChangeEmail(id uint, cmd request.ChangeEmail) error {
	ret := _m.Called(id, cmd)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, request.ChangeEmail) error); ok {
		r0 = rf(id, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangePassword provides a mock function with given fields: cmd
func (_m *AccountService) ChangePassword(cmd request.ChangePassword) (interface{}, error) {
	ret := _m.Called(cmd)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(request.ChangePassword) interface{}); ok {
		r0 = rf(cmd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(request.ChangePassword) error); ok {
		r1 = rf(cmd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangePhone provides a mock function with given fields: id, cmd
func (_m *AccountService) ChangePhone(id uint, cmd request.ChangePhone) error {
	ret := _m.Called(id, cmd)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, request.ChangePhone) error); ok {
		r0 = rf(id, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindMenuTrees provides a mock function with given fields: userID
func (_m *AccountService) FindMenuTrees(userID uint) (response.UserMenus, error) {
	ret := _m.Called(userID)

	var r0 response.UserMenus
	if rf, ok := ret.Get(0).(func(uint) response.UserMenus); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(response.UserMenus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindPermissions provides a mock function with given fields: userID
func (_m *AccountService) FindPermissions(userID uint) (response.UserPermissions, error) {
	ret := _m.Called(userID)

	var r0 response.UserPermissions
	if rf, ok := ret.Get(0).(func(uint) response.UserPermissions); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(response.UserPermissions)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: _a0
func (_m *AccountService) Login(_a0 request.Login) (interface{}, error) {
	ret := _m.Called(_a0)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(request.Login) interface{}); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(request.Login) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Profile provides a mock function with given fields: id
func (_m *AccountService) Profile(id uint) (response.Profile, error) {
	ret := _m.Called(id)

	var r0 response.Profile
	if rf, ok := ret.Get(0).(func(uint) response.Profile); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(response.Profile)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Token provides a mock function with given fields: id
func (_m *AccountService) Token(id uint) (interface{}, error) {
	ret := _m.Called(id)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(uint) interface{}); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProfile provides a mock function with given fields: id, cmd
func (_m *AccountService) UpdateProfile(id uint, cmd request.UpdateProfile) error {
	ret := _m.Called(id, cmd)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, request.UpdateProfile) error); ok {
		r0 = rf(id, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyEmail provides a mock function with given fields: id, cmd
func (_m *AccountService) VerifyEmail(id uint, cmd request.VerifyEmail) error {
	ret := _m.Called(id, cmd)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, request.VerifyEmail) error); ok {
		r0 = rf(id, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyPhone provides a mock function with given fields: id, cmd
func (_m *AccountService) VerifyPhone(id uint, cmd request.VerifyPhone) error {
	ret := _m.Called(id, cmd)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, request.VerifyPhone) error); ok {
		r0 = rf(id, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithContext provides a mock function with given fields: ctx
func (_m *AccountService) WithContext(ctx echo.Context) service.AccountService {
	ret := _m.Called(ctx)

	var r0 service.AccountService
	if rf, ok := ret.Get(0).(func(echo.Context) service.AccountService); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.AccountService)
		}
	}

	return r0
}

type mockConstructorTestingTNewAccountService interface {
	mock.TestingT
	Cleanup(func())
}

// NewAccountService creates a new instance of AccountService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAccountService(t mockConstructorTestingTNewAccountService) *AccountService {
	mock := &AccountService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
