// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	echo "github.com/rinnguyen1614/rin-echo/internal/core/echo"
	mock "github.com/stretchr/testify/mock"

	model "github.com/rinnguyen1614/rin-echo/internal/core/model"

	query "github.com/rinnguyen1614/rin-echo/internal/core/query"

	request "github.com/rinnguyen1614/rin-echo/internal/system/app/model/request"

	response "github.com/rinnguyen1614/rin-echo/internal/system/app/model/response"

	service "github.com/rinnguyen1614/rin-echo/internal/system/app/service"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *UserService) Create(_a0 request.CreateUser) (uint, error) {
	ret := _m.Called(_a0)

	var r0 uint
	if rf, ok := ret.Get(0).(func(request.CreateUser) uint); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(request.CreateUser) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDefault provides a mock function with given fields: cmd
func (_m *UserService) CreateDefault(cmd request.CreateUser) (uint, error) {
	ret := _m.Called(cmd)

	var r0 uint
	if rf, ok := ret.Get(0).(func(request.CreateUser) uint); ok {
		r0 = rf(cmd)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(request.CreateUser) error); ok {
		r1 = rf(cmd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *UserService) Delete(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *UserService) Get(id uint) (response.User, error) {
	ret := _m.Called(id)

	var r0 response.User
	if rf, ok := ret.Get(0).(func(uint) response.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(response.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Query provides a mock function with given fields: q
func (_m *UserService) Query(q *query.Query) (*model.QueryResult, error) {
	ret := _m.Called(q)

	var r0 *model.QueryResult
	if rf, ok := ret.Get(0).(func(*query.Query) *model.QueryResult); ok {
		r0 = rf(q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.QueryResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*query.Query) error); ok {
		r1 = rf(q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, cmd
func (_m *UserService) Update(id uint, cmd request.UpdateUser) error {
	ret := _m.Called(id, cmd)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, request.UpdateUser) error); ok {
		r0 = rf(id, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithContext provides a mock function with given fields: _a0
func (_m *UserService) WithContext(_a0 echo.Context) service.UserService {
	ret := _m.Called(_a0)

	var r0 service.UserService
	if rf, ok := ret.Get(0).(func(echo.Context) service.UserService); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.UserService)
		}
	}

	return r0
}

type mockConstructorTestingTNewUserService interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserService(t mockConstructorTestingTNewUserService) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
